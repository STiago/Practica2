#!/usr/bin/env python
# -*- coding: utf-8 -*-

import web
#import mandelbrot.py
from web import form
import numpy as np
import matplotlib.pyplot as plt
from web.contrib.template import render_mako

# Para poder usar sesiones con web.py
web.config.debug = False
        
urls = (
    '/hello', 'hello',
    '/imagen', 'imagen',
	 '/formulario' , 'index',
    '/fractal', 'fractal',
    '/formulario3', 'fomulprac3',
    '/template', 'templ',
	 '/inicio', 'inicio',
	 '/logout', 'logout',
    '/(.*)', 'error'
)

app = web.application(urls, globals())
plantilla = web.template.render('./templates/')


####################################################

session = web.session.Session(app, web.session.DiskStore('sessions'), initializer={'usuario':''})

# Templates de mako
render = render_mako (
	directories = ['templates'],
	input_encoding = 'utf-8',
	output_encoding = 'utf-8')


login_form = form.Form (
	form.Textbox ('username', form.notnull, description='Usuario:'),
	form.Password ('password', form.notnull, description=u'Contraseña:'),
	form.Button ('Login'),
)


def password_correcto_de (usuario):
	return usuario	+'3'         # concateno un '3' al nombre de usuario
    # En la realidad habría que guardar los
    # passwords de cada usuario en una base de datos


def comprueba_identificacion (): 
	usuario = session.usuario   # Devuelve '' cuando no está identificado
	return usuario              # que es el usuario inicial 
                                  


class logout:
	def GET(self):
		usuario = session.usuario
		session.kill()
		return 'adios ' + usuario



# Comprueba que el usuario esté identificado
# sino se lo pide
class inicio:
	def GET(self):
		usuario = comprueba_identificacion () 
		if usuario:
			return web.seeother('/template') # render.inicio (usuario = usuario)
		else:
			form = login_form ()
			return render.login(form=form, usuario=usuario)  
	def POST(self):

		form = login_form ()
		if not form.validates ():
			return render.login (form=form, usuario='', mensaje = '')

		i = web.input()
		usuario  = i.username
		password = i.password
		if password == password_correcto_de (usuario):
			session.usuario = usuario
			return web.seeother('/template')   # Redirige al formulario
		else:
			form = login_form ()
			return render.login (form=form, usuario='', 
                                 mensaje = u'pero con el password correcto que sería ' +
                                           password_correcto_de (usuario))




###################################################

formu = form.Form(
	form.Textbox("nombre", form.notnull),
	form.Textbox("otro", form.notnull),
   form.Button("Enviar")
)

form_fractal = form.Form(
	form.Textbox("x_min", form.notnull),
	form.Textbox("x_max", form.notnull),
	form.Textbox("y_min", form.notnull),
	form.Textbox("y_max", form.notnull),
	form.Textbox("pixeles", form.notnull),
	form.Textbox("iteraciones", form.notnull),
   form.Button("Enviar")
)

form_pract3 = form.Form(
	form.Textbox("Nombre", form.notnull),
	form.Textbox("Apellidos", form.notnull),
	form.Textbox("DNI", form.notnull, form.regexp('^([0-9]{8}[A-Z])$', "Formato de DNI no valido")),
	form.Textbox("e-mail", form.notnull, form.regexp('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$', "Formato de correo incorrecto")), 
	form.Textbox("VISA", form.notnull, form.regexp('^([0-9]{4}) ([0-9]{4}) ([0-9]{4}) ([0-9]{4})|([0-9]{4})-([0-9]{4})-([0-9]{4})-([0-9]{4})$', "Formato de tarjeta VISA no valido")),
	form.Dropdown("dia",[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31], description="Día de nacimiento"),
   form.Dropdown("mes",[1,2,3,4,5,6,7,8,9,10,11,12], description="Mes de nacimiento"),
	form.Dropdown("anio",[1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014], description="Año de nacimiento"),
	form.Textarea("Direccion", form.notnull),
	form.Password("Contrasenia", form.notnull, post = "Su contraseña debe de tener mas de 7 caracteres"),
   form.Password("Verificacion", form.notnull, pre= "Repita su contraseña"),
	form.Radio("pago", ['Contra reembolso', 'VISA'],form.notnull),
	form.Checkbox("clausulas",form.Validator("Debes aceptar las cláusulas de la protección de datos", lambda i: "clausulas" not in i), description="Acepta las clausulas"),
	form.Button("OK"),
	validators = [form.Validator("No coinciden las contraseñas", lambda i: i.Contrasenia == i.Verificacion), form.Validator("Longitud de contraseña", lambda i: len(i.Contrasenia)>=7)]	
)


def img_fractal(x_minimo, x_maximo, y_minimo, y_maximo, pixeles, iteraciones):
	x, y = np.meshgrid(np.linspace(x_minimo, x_maximo, pixeles), np.linspace(y_minimo, y_maximo, pixeles))

	# Funcion de recurrencia para el conjunto de mandelbrot
	def znn(z, cc):
		return z**2 + cc

	c = x + 1j*y # Cuadricula compleja
	z = c.copy()
	fractal = np.zeros(z.shape, dtype=np.uint8) + 255 # Color inicial (lo que no pertenece al fractal)

	# Iterar
	for n in range(iteraciones):

		# Se actualiza z recursivamente
		z = znn(z, c)

		# Mascara
		mask = (np.abs(z) > 2)

		# Actualizar el color del fractal
		# Color depende de la iteracion actual
		fractal[mask] =  255 *  (n / float(iteraciones))

	# Mostrar la imagen usando como pixeles el fractal y mapa de colores "hot"
	plt.imshow(np.log(fractal), cmap=plt.cm.hot, extent=(x_minimo, x_maximo, y_minimo, y_maximo))
	plt.title('Conjunto de Mandelbrot')
	plt.show()

class hello:
	def GET(self):
		name = 'Desarrollo de app para internet'
		return 'Practica 2 -' + name


class imagen:        
   def GET(self):
   	return '<!DOCTYPE html><html lang="es"><head><meta charset="utf-8"><title>practica2</title></head><body><img src="static/alhambra7.jpg" alt="imagen"/></body></html>' 

class index:
	def GET(self):
		form = formu()
		return plantilla.formulario(form)

	def POST(self):
		form = formu()
		if not form.validates():
			return plantilla.formulario(form)
		else:
			return "Mensaje enviado correctamente %s %s" % (form.d.nombre, form.d.otro)

class fractal:
	def GET(self):
		form = form_fractal()
		return plantilla.formulario(form)
	
	def POST(self):
		form = form_fractal()
		if not form.validates():
			return plantilla.formulario(form)
		else:
			return img_fractal(float(form.d.x_min), float(form.d.x_max), float(form.d.y_min), float(form.d.y_max), int(form.d.pixeles), int(form.d.iteraciones))	


#Practica 3
class fomulprac3:
	def GET(self):
		form = form_pract3()
		return plantilla.formulario(form)

	def POST(self):
		form = form_pract3()
		if not form.validates():
			return plantilla.formulario(form)
		else:
			return "Formulario practica 3 enviado correctamente" #%s %s" % (form.d.nombre, form.d.otro)	


class templ:
	def GET(self):
		usuario = comprueba_identificacion () 
		form = form_pract3()
		if usuario:
			return render.inicio (usuario = usuario, form = form)
		else:
			form = login_form ()
			return render.login(form=form, usuario=usuario)  
		 


class error:
   def GET(self, name):
		return '<!DOCTYPE html><html lang="es"><head><meta charset="utf-8"><title>ERROR</title></head><body><header>[ERROR 404] - NOT FOUND</header></body></html>' 

if __name__ == "__main__":
    app.run()
